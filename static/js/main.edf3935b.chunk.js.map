{"version":3,"sources":["App.tsx","serviceWorkerRegistration.ts","reportWebVitals.ts","index.tsx"],"names":["App","prefersDarkMode","useMediaQuery","useState","value","setValue","open","setOpen","toggleDrawer","event","type","key","theme","style","height","width","display","justifyContent","alignItems","position","color","flexGrow","fontWeight","fontSize","smDown","variant","shape","mdUp","onChange","_","newValue","bottom","label","icon","onClick","anchor","onClose","onOpen","marginTop","fullWidth","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","console","log","onUpdate","onSuccess","catch","error","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById","URL","process","href","origin","addEventListener","fetch","headers","response","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker","serviceWorkerRegistration"],"mappings":"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","file":"static/js/main.edf3935b.chunk.js","sourcesContent":["import React, { ChangeEvent, useState } from \"react\";\nimport {\n  BottomNavigation,\n  BottomNavigationAction,\n  Button,\n  Drawer,\n  Hidden,\n  NavigationBar,\n  ThemeProvider,\n  Toolbar,\n  useMediaQuery,\n} from \"@12emake/design-system\";\nimport HomeIcon from \"@material-ui/icons/Home\";\nimport MenuIcon from \"@material-ui/icons/MenuOpen\";\nimport LocationOnIcon from \"@material-ui/icons/LocationOn\";\n\nconst App = () => {\n  const prefersDarkMode = useMediaQuery(\"(prefers-color-scheme: dark)\");\n  const [value, setValue] = useState(0);\n  const [open, setOpen] = useState(false);\n\n  const toggleDrawer = (open: boolean) => (event: any) => {\n    if (\n      event?.type === \"keydown\" &&\n      (event?.key === \"Tab\" || event?.key === \"Shift\")\n    ) {\n      return;\n    }\n\n    setOpen(open);\n  };\n\n  const onChange = (_: ChangeEvent<{}>, newValue: number) => setValue(newValue);\n\n  return (\n    <ThemeProvider\n      theme={prefersDarkMode ? \"darkUnderTheLake\" : \"underTheLake\"}\n    >\n      <div\n        style={{\n          height: \"100vh\",\n          width: \"100vw\",\n          display: \"flex\",\n          justifyContent: \"center\",\n          alignItems: \"center\",\n        }}\n      >\n        <NavigationBar position=\"fixed\" color=\"inherit\">\n          <Toolbar>\n            <div style={{ flexGrow: 1, fontWeight: 900, fontSize: \"30px\" }}>\n              molkky\n            </div>\n            <Hidden smDown>\n              <Button color=\"inherit\" variant=\"text\" shape=\"square\">\n                Login\n              </Button>\n            </Hidden>\n          </Toolbar>\n        </NavigationBar>\n        <Button>Start a molkky game</Button>\n        <Hidden mdUp>\n          <BottomNavigation\n            value={value}\n            onChange={onChange}\n            style={{ position: \"fixed\", bottom: 0, width: \"100vw\" }}\n          >\n            <BottomNavigationAction label=\"Home\" icon={<HomeIcon />} />\n            <BottomNavigationAction\n              label=\"Favorites\"\n              icon={<LocationOnIcon />}\n            />\n            <BottomNavigationAction\n              label=\"Menu\"\n              icon={<MenuIcon />}\n              onClick={toggleDrawer(true)}\n            />\n          </BottomNavigation>\n        </Hidden>\n        <Drawer\n          anchor=\"right\"\n          open={open}\n          onClose={toggleDrawer(false)}\n          onOpen={toggleDrawer(true)}\n        >\n          <div style={{ width: \"300px\", marginTop: \"30px\" }}>\n            <Button color=\"default\" variant=\"text\" shape=\"square\" fullWidth>\n              Inbox\n            </Button>\n            <Button color=\"default\" variant=\"text\" shape=\"square\" fullWidth>\n              Example\n            </Button>\n            <Button color=\"default\" variant=\"text\" shape=\"square\" fullWidth>\n              Settings\n            </Button>\n          </div>\n        </Drawer>\n      </div>\n    </ThemeProvider>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://cra.link/PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/)\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\n/**\n * Register the app\n * @param {Config} config - The app config\n */\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://cra.link/PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\n/**\n * Register valid\n * @param {string} swUrl - The url\n * @param {Config} config - The app config\n */\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://cra.link/PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\n/**\n * Checks valid service worker\n * @param {string} swUrl - The url\n * @param {Config} config - The app config\n */\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log('No internet connection found. App is running in offline mode.');\n    });\n}\n\n/**\n * Unregister application\n */\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister();\n      })\n      .catch((error) => {\n        console.error(error.message);\n      });\n  }\n}\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport * as serviceWorkerRegistration from \"./serviceWorkerRegistration\";\nimport reportWebVitals from \"./reportWebVitals\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://cra.link/PWA\nserviceWorkerRegistration.register();\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}