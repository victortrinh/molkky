{"version":3,"sources":["internalization/i18n.ts","serviceWorkerRegistration.ts","components/navigation/bottomNavigationBar.tsx","components/navigation/navigationBar.tsx","components/shared/mainContainer.tsx","pages/settings.tsx","routes/index.ts","routes/pages/home.ts","pages/home.tsx","routes/pages/notFound.ts","pages/notFound.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["resources","en","fr","i18n","use","detector","backend","initReactI18next","init","lng","fallbackLng","keySeparator","interpolation","escapeValue","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","console","log","onUpdate","onSuccess","catch","error","StyledBottomNavigation","styled","BottomNavigation","StyledBottomNavigationAction","BottomNavigationAction","BottomNavigationBar","history","useHistory","useState","pathname","value","setValue","useTranslation","t","mdUp","onChange","_","newValue","push","label","icon","NavigationBar","theme","useTheme","isMobile","useMediaQuery","breakpoints","down","StyledNavigationBar","position","color","$isMobile","$primarycolor","palette","primary","main","$secondarycolor","light","StyledLogoContainer","src","process","alt","smDown","StyledLink","to","variant","Link","ExternalNavigationBar","props","css","div","MainContainer","StyledContainer","Container","$disableCentered","StyledList","List","Settings","darkModeOn","toggleDarkModeOn","openLanguageCollapse","setOpenLanguageCollapse","changeLanguage","event","i18next","currentTarget","id","container","justify","alignItems","item","xs","sm","subheader","button","onClick","in","timeout","unmountOnExit","disablePadding","className","edge","checked","inputProps","routes","key","component","size","fullWidth","path","exact","App","prefersDarkMode","setDarkModeOn","useEffect","get","set","basename","render","map","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","StrictMode","document","getElementById","URL","href","origin","addEventListener","fetch","headers","response","contentType","status","indexOf","ready","unregister","reload","checkValidServiceWorker","serviceWorkerRegistration"],"mappings":"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","file":"static/js/main.4d755b40.chunk.js","sourcesContent":["import backend from \"i18next-xhr-backend\";\nimport detector from \"i18next-browser-languagedetector\";\nimport en from \"./translations/en.json\";\nimport fr from \"./translations/fr.json\";\nimport i18n from \"i18next\";\nimport { initReactI18next } from \"react-i18next\";\n\nconst resources = {\n  en,\n  fr,\n};\n\ni18n\n  .use(detector)\n  .use(backend)\n  .use(initReactI18next)\n  .init({\n    resources,\n    lng: \"en\",\n    fallbackLng: \"en\",\n\n    keySeparator: false,\n\n    interpolation: {\n      escapeValue: false,\n    },\n  });\n\nexport default i18n;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://cra.link/PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/)\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\n/**\n * Register the app\n * @param {Config} config - The app config\n */\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://cra.link/PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\n/**\n * Register valid\n * @param {string} swUrl - The url\n * @param {Config} config - The app config\n */\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://cra.link/PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\n/**\n * Checks valid service worker\n * @param {string} swUrl - The url\n * @param {Config} config - The app config\n */\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log('No internet connection found. App is running in offline mode.');\n    });\n}\n\n/**\n * Unregister application\n */\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister();\n      })\n      .catch((error) => {\n        console.error(error.message);\n      });\n  }\n}\n","import {\n  BottomNavigation,\n  BottomNavigationAction,\n  Hidden,\n} from \"@12emake/design-system\";\nimport React, { ChangeEvent, useState } from \"react\";\n\nimport HomeIcon from \"@material-ui/icons/Home\";\nimport SettingsIcon from \"@material-ui/icons/Settings\";\nimport styled from \"styled-components\";\nimport { useHistory } from \"react-router-dom\";\nimport { useTranslation } from \"react-i18next\";\n\nconst BottomNavigationBar = () => {\n  const history = useHistory();\n  const [value, setValue] = useState(history.location.pathname);\n  const [t] = useTranslation();\n\n  const onChange = (_: ChangeEvent<{}>, newValue: any) => {\n    setValue(newValue);\n    history.push(newValue);\n  };\n\n  return (\n    <Hidden mdUp>\n      <StyledBottomNavigation value={value} onChange={onChange}>\n        <StyledBottomNavigationAction\n          value=\"/\"\n          label={t(\"home\")}\n          icon={<HomeIcon />}\n        />\n        <StyledBottomNavigationAction\n          value=\"/settings\"\n          label={t(\"settings\")}\n          icon={<SettingsIcon />}\n        />\n      </StyledBottomNavigation>\n    </Hidden>\n  );\n};\n\nconst StyledBottomNavigation = styled(BottomNavigation)`\n  position: fixed;\n  bottom: 0;\n  width: 100vw;\n  height: calc(env(safe-area-inset-bottom, -60px) + 60px);\n`;\n\nconst StyledBottomNavigationAction = styled(BottomNavigationAction)`\n  padding-bottom: env(safe-area-inset-bottom, 0) !important;\n  max-width: inherit !important;\n`;\n\nexport default BottomNavigationBar;\n","import {\n  Button,\n  NavigationBar as ExternalNavigationBar,\n  Hidden,\n  Toolbar,\n  useMediaQuery,\n  useTheme,\n} from \"@12emake/design-system\";\nimport styled, { css } from \"styled-components\";\n\nimport { Link } from \"react-router-dom\";\nimport React from \"react\";\nimport { useTranslation } from \"react-i18next\";\n\nconst LOGO_IMAGE_NAME = \"molkky.svg\";\n\nexport const NavigationBar = () => {\n  const [t] = useTranslation();\n  const theme = useTheme();\n  const isMobile = useMediaQuery(theme.breakpoints.down(\"sm\"));\n\n  return (\n    <StyledNavigationBar\n      position=\"fixed\"\n      color={isMobile ? \"transparent\" : \"primary\"}\n      $isMobile\n      $primarycolor={theme.palette.primary.main}\n      $secondarycolor={theme.palette.primary.light}\n    >\n      <Toolbar>\n        <StyledLogoContainer>\n          <img\n            src={`${process.env.PUBLIC_URL}/${LOGO_IMAGE_NAME}`}\n            alt={t(\"home\")}\n          />\n        </StyledLogoContainer>\n        <Hidden smDown>\n          <StyledLink to=\"/settings\">\n            <Button color=\"inherit\" variant=\"text\">\n              {t(\"settings\")}\n            </Button>\n          </StyledLink>\n          <Button color=\"inherit\" variant=\"text\">\n            {t(\"login\")}\n          </Button>\n        </Hidden>\n      </Toolbar>\n    </StyledNavigationBar>\n  );\n};\n\nconst StyledLink = styled(Link)`\n  text-decoration: none;\n  margin-right: 20px;\n  color: white !important;\n`;\n\ntype StyledNavigationBar = {\n  $isMobile: boolean;\n  $primarycolor: string;\n  $secondarycolor: string;\n};\n\nconst StyledNavigationBar = styled(ExternalNavigationBar)<StyledNavigationBar>`\n  background: ${(props) =>\n    `linear-gradient(45deg, ${props.$primarycolor} 0%, ${props.$secondarycolor} 100%)`};\n\n  ${(props) =>\n    props.$isMobile &&\n    css`\n      padding-top: env(safe-area-inset-top, 0);\n      box-shadow: none !important;\n\n      img {\n        height: 35px;\n      }\n    `}\n`;\n\nconst StyledLogoContainer = styled.div`\n  display: flex;\n  flex: 1;\n`;\n","import styled, { css } from \"styled-components\";\n\nimport { Container } from \"@12emake/design-system\";\nimport { ContainerProps } from \"@12emake/design-system/dist/components/layout/container\";\nimport React from \"react\";\n\nexport const MainContainer: React.FunctionComponent<\n  ContainerProps & StyledContainerProps\n> = (props) => <StyledContainer {...props} />;\n\ntype StyledContainerProps = {\n  $disableCentered?: boolean;\n};\n\nconst StyledContainer = styled(Container)<StyledContainerProps>`\n  width: 100%;\n  height: 100%;\n  padding-top: calc(env(safe-area-inset-top, -80px) + 80px);\n  padding-bottom: calc(env(safe-area-inset-bottom, -80px) + 80px);\n\n  ${(props) =>\n    !props.$disableCentered &&\n    css`\n      padding-top: 0;\n      padding-bottom: 0;\n      display: flex;\n      justify-content: center;\n      align-items: center;\n    `}\n`;\n","import {\n  Collapse,\n  Divider,\n  Grid,\n  List,\n  ListItem,\n  ListItemIcon,\n  ListItemSecondaryAction,\n  ListItemText,\n  ListSubheader,\n  Switch,\n} from \"@12emake/design-system\";\nimport React, { MouseEvent, useState } from \"react\";\n\nimport ExpandLessIcon from \"@material-ui/icons/ExpandLess\";\nimport ExpandMoreMore from \"@material-ui/icons/ExpandMore\";\nimport FormatPaintIcon from \"@material-ui/icons/FormatPaint\";\nimport LanguageIcon from \"@material-ui/icons/Language\";\nimport { MainContainer } from \"../components/shared/mainContainer\";\nimport i18next from \"i18next\";\nimport styled from \"styled-components\";\nimport { useTranslation } from \"react-i18next\";\n\ntype SettingsProps = {\n  darkModeOn: boolean;\n  toggleDarkModeOn: () => void;\n};\n\nconst Settings: React.FC<SettingsProps> = ({\n  darkModeOn,\n  toggleDarkModeOn,\n}) => {\n  const [openLanguageCollapse, setOpenLanguageCollapse] = useState(false);\n  const [t] = useTranslation();\n\n  const handleClick = () => {\n    setOpenLanguageCollapse(!openLanguageCollapse);\n  };\n\n  const changeLanguage = (event: MouseEvent<HTMLLIElement>) => {\n    i18next.changeLanguage(event.currentTarget.id);\n    setOpenLanguageCollapse(false);\n  };\n\n  return (\n    <MainContainer $disableCentered>\n      <Grid container justify=\"center\" alignItems=\"center\">\n        <Grid item xs={12} sm={6}>\n          <StyledList\n            subheader={<ListSubheader>{t(\"settings\")}</ListSubheader>}\n          >\n            <ListItem button onClick={handleClick}>\n              <ListItemIcon>\n                <LanguageIcon />\n              </ListItemIcon>\n              <ListItemText primary={t(\"language\")} />\n              {openLanguageCollapse ? <ExpandLessIcon /> : <ExpandMoreMore />}\n            </ListItem>\n            <Collapse in={openLanguageCollapse} timeout=\"auto\" unmountOnExit>\n              <List disablePadding>\n                <ListItem\n                  button\n                  className=\"list-item\"\n                  id=\"en\"\n                  onClick={changeLanguage}\n                >\n                  <ListItemText primary=\"English\" />\n                </ListItem>\n                <ListItem\n                  button\n                  className=\"list-item\"\n                  id=\"fr\"\n                  onClick={changeLanguage}\n                >\n                  <ListItemText primary=\"Français\" />\n                </ListItem>\n              </List>\n            </Collapse>\n            <Divider />\n            <ListItem>\n              <ListItemIcon>\n                <FormatPaintIcon />\n              </ListItemIcon>\n              <ListItemText primary={t(\"dark-mode\")} />\n              <ListItemSecondaryAction>\n                <Switch\n                  edge=\"end\"\n                  onChange={toggleDarkModeOn}\n                  checked={darkModeOn}\n                  inputProps={{ \"aria-labelledby\": \"switch-list-label-wifi\" }}\n                />\n              </ListItemSecondaryAction>\n            </ListItem>\n          </StyledList>\n        </Grid>\n      </Grid>\n    </MainContainer>\n  );\n};\n\nconst StyledList = styled(List)`\n  width: 100%;\n\n  .list-item {\n    padding-left: 73px;\n  }\n`;\n\nexport default Settings;\n","import { Route } from \"./route\";\nimport home from \"./pages/home\";\nimport notFound from \"./pages/notFound\";\n\nconst routes: Route[] = [home, notFound];\n\nexport default routes;\n","import Home from \"../../pages/home\";\nimport { Route } from \"../route\";\n\nconst home: Route = {\n  key: \"home\",\n  component: Home,\n  path: \"/\",\n  exact: true,\n};\n\nexport default home;\n","import { Button, useMediaQuery, useTheme } from \"@12emake/design-system\";\n\nimport { MainContainer } from \"../components/shared/mainContainer\";\nimport React from \"react\";\nimport { useTranslation } from \"react-i18next\";\n\nconst Home = () => {\n  const [t] = useTranslation();\n  const theme = useTheme();\n  const isMobile = useMediaQuery(theme.breakpoints.down(\"sm\"));\n\n  return (\n    <MainContainer>\n      <Button\n        size={isMobile ? \"large\" : \"medium\"}\n        color=\"secondary\"\n        fullWidth={isMobile}\n      >\n        {t(\"start game\")}\n      </Button>\n    </MainContainer>\n  );\n};\n\nexport default Home;\n","import NotFound from \"../../pages/notFound\";\nimport { Route } from \"../route\";\n\nconst notFound: Route = {\n  key: \"home\",\n  component: NotFound,\n};\n\nexport default notFound;\n","import { MainContainer } from \"../components/shared/mainContainer\";\nimport React from \"react\";\nimport { useTranslation } from \"react-i18next\";\n\nconst NotFound = () => {\n  const [t] = useTranslation();\n\n  return (\n    <MainContainer>\n      <>{t(\"not-found\")}</>\n    </MainContainer>\n  );\n};\n\nexport default NotFound;\n","import { BrowserRouter, Route, Switch } from \"react-router-dom\";\nimport React, { useEffect, useState } from \"react\";\nimport { ThemeProvider, useMediaQuery } from \"@12emake/design-system\";\nimport { get, set } from \"idb-keyval\";\n\nimport BottomNavigationBar from \"./components/navigation/bottomNavigationBar\";\nimport { NavigationBar } from \"./components/navigation/navigationBar\";\nimport Settings from \"./pages/settings\";\nimport routes from \"./routes\";\nimport styled from \"styled-components\";\n\nconst App = () => {\n  const prefersDarkMode = useMediaQuery(\"(prefers-color-scheme: dark)\");\n  const [darkModeOn, setDarkModeOn] = useState<boolean>(prefersDarkMode);\n\n  useEffect(() => {\n    get<boolean>(\"darkModeOn\").then((value) => {\n      if (value && value !== darkModeOn) {\n        setDarkModeOn(value);\n      }\n    });\n  }, [setDarkModeOn]);\n\n  const toggleDarkModeOn = () => {\n    setDarkModeOn(!darkModeOn);\n    set(\"darkModeOn\", !darkModeOn);\n  };\n\n  return (\n    <ThemeProvider theme={darkModeOn ? \"darkUnderTheLake\" : \"underTheLake\"}>\n      <BrowserRouter basename=\"molkky\">\n        <StyledContainer>\n          <NavigationBar />\n          <Switch>\n            <Route\n              path=\"/settings\"\n              render={() => (\n                <Settings\n                  darkModeOn={darkModeOn}\n                  toggleDarkModeOn={toggleDarkModeOn}\n                />\n              )}\n            />\n            {routes.map(({ key, ...props }) => (\n              <Route key={key} {...props} />\n            ))}\n          </Switch>\n          <BottomNavigationBar />\n        </StyledContainer>\n      </BrowserRouter>\n    </ThemeProvider>\n  );\n};\n\nconst StyledContainer = styled.div`\n  height: 100vh;\n  width: 100vw;\n`;\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import \"./internalization/i18n\";\n\nimport * as serviceWorkerRegistration from \"./serviceWorkerRegistration\";\n\nimport App from \"./App\";\nimport React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport reportWebVitals from \"./reportWebVitals\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://cra.link/PWA\nserviceWorkerRegistration.register();\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}