{"version":3,"sources":["internalization/i18n.ts","components/navigation/navigationBar.tsx","App.tsx","serviceWorkerRegistration.ts","reportWebVitals.ts","index.tsx"],"names":["resources","en","fr","i18n","use","initReactI18next","init","lng","keySeparator","interpolation","escapeValue","NavigationBar","useTranslation","t","theme","useTheme","isMobile","useMediaQuery","breakpoints","down","position","color","className","undefined","style","background","palette","primary","main","light","flexGrow","fontWeight","fontSize","smDown","variant","shape","App","prefersDarkMode","useState","value","setValue","height","width","display","justifyContent","alignItems","size","fullWidth","mdUp","onChange","_","newValue","label","icon","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","console","log","onUpdate","onSuccess","catch","error","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById","URL","process","href","origin","addEventListener","fetch","headers","response","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker","serviceWorkerRegistration"],"mappings":"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","file":"static/js/main.fdd331ee.chunk.js","sourcesContent":["import i18n from \"i18next\";\r\nimport { initReactI18next } from \"react-i18next\";\r\nimport en from \"./translations/en.json\";\r\nimport fr from \"./translations/fr.json\";\r\n\r\nconst resources = {\r\n  en,\r\n  fr\r\n};\r\n\r\ni18n\r\n  .use(initReactI18next)\r\n  .init({\r\n    resources,\r\n    lng: \"en\",\r\n\r\n    keySeparator: false,\r\n\r\n    interpolation: {\r\n      escapeValue: false \r\n    }\r\n  });\r\n\r\n  export default i18n;","import {\r\n  Button,\r\n  NavigationBar as ExternalNavigationBar,\r\n  Hidden,\r\n  Toolbar,\r\n  useMediaQuery,\r\n  useTheme,\r\n} from \"@12emake/design-system\";\r\n\r\nimport React from \"react\";\r\nimport { useTranslation } from \"react-i18next\";\r\n\r\nexport const NavigationBar = () => {\r\n  const [t] = useTranslation();\r\n  const theme = useTheme();\r\n  const isMobile = useMediaQuery(theme.breakpoints.down(\"sm\"));\r\n\r\n  return (\r\n    <ExternalNavigationBar\r\n      position=\"fixed\"\r\n      color={isMobile ? \"transparent\" : \"primary\"}\r\n      className={isMobile ? \"test2\" : undefined}\r\n      style={{\r\n        background: `linear-gradient(45deg, ${theme.palette.primary.main} 0%, ${theme.palette.primary.light} 100%)`,\r\n      }}\r\n    >\r\n      <Toolbar>\r\n        <div\r\n          style={{\r\n            flexGrow: 1,\r\n            fontWeight: 900,\r\n            fontSize: \"30px\",\r\n          }}\r\n        >\r\n          molkky\r\n        </div>\r\n        <Hidden smDown>\r\n          <Button color=\"inherit\" variant=\"text\" shape=\"square\">\r\n            {t(\"login\")}\r\n          </Button>\r\n        </Hidden>\r\n      </Toolbar>\r\n    </ExternalNavigationBar>\r\n  );\r\n};\r\n","import \"./App.css\";\n\nimport {\n  BottomNavigation,\n  BottomNavigationAction,\n  Button,\n  Container,\n  Hidden,\n  ThemeProvider,\n  useMediaQuery,\n  useTheme,\n} from \"@12emake/design-system\";\nimport React, { ChangeEvent, useState } from \"react\";\n\nimport HomeIcon from \"@material-ui/icons/Home\";\nimport { NavigationBar } from \"./components/navigation/navigationBar\";\nimport SettingsIcon from \"@material-ui/icons/Settings\";\nimport { useTranslation } from \"react-i18next\";\n\nconst App = () => {\n  const prefersDarkMode = useMediaQuery(\"(prefers-color-scheme: dark)\");\n  const [value, setValue] = useState(0);\n  const [t] = useTranslation();\n  const theme = useTheme();\n  const isMobile = useMediaQuery(theme.breakpoints.down(\"sm\"));\n\n  const onChange = (_: ChangeEvent<{}>, newValue: number) => setValue(newValue);\n\n  return (\n    <ThemeProvider\n      theme={prefersDarkMode ? \"darkUnderTheLake\" : \"underTheLake\"}\n    >\n      <div\n        style={{\n          height: \"100vh\",\n          width: \"100vw\",\n        }}\n      >\n        <NavigationBar />\n        <Container\n          style={{\n            width: \"100%\",\n            height: \"100%\",\n            display: \"flex\",\n            justifyContent: \"center\",\n            alignItems: \"center\",\n          }}\n        >\n          <Button size={isMobile ? \"large\" : \"medium\"} fullWidth={isMobile}>\n            {t(\"start game\")}\n          </Button>\n        </Container>\n        <Hidden mdUp>\n          <BottomNavigation className=\"test\" value={value} onChange={onChange}>\n            <BottomNavigationAction label={t(\"home\")} icon={<HomeIcon />} />\n            <BottomNavigationAction\n              label={t(\"settings\")}\n              icon={<SettingsIcon />}\n            />\n          </BottomNavigation>\n        </Hidden>\n      </div>\n    </ThemeProvider>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://cra.link/PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/)\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\n/**\n * Register the app\n * @param {Config} config - The app config\n */\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://cra.link/PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\n/**\n * Register valid\n * @param {string} swUrl - The url\n * @param {Config} config - The app config\n */\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://cra.link/PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\n/**\n * Checks valid service worker\n * @param {string} swUrl - The url\n * @param {Config} config - The app config\n */\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log('No internet connection found. App is running in offline mode.');\n    });\n}\n\n/**\n * Unregister application\n */\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister();\n      })\n      .catch((error) => {\n        console.error(error.message);\n      });\n  }\n}\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./internalization/i18n\";\nimport App from \"./App\";\nimport * as serviceWorkerRegistration from \"./serviceWorkerRegistration\";\nimport reportWebVitals from \"./reportWebVitals\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://cra.link/PWA\nserviceWorkerRegistration.register();\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}